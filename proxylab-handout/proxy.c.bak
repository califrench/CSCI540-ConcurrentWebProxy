/**
 * proxy.c - CS:APP Web proxy
 *
 * TEAM MEMBERS:
 *     Andrew Carnegie, ac00@cs.cmu.edu 
 *     Harry Q. Bovik, bovik@cs.cmu.edu
 * 
 * IMPORTANT: Give a high level description of your code here. You
 * must also provide a header comment at the beginning of each
 * function that describes what that function does.
 */ 

#include "csapp.h"


/**
 * Function prototypes
 */
int parse_uri(char *uri, char *target_addr, char *path, int  *port);
void format_log_entry(char *logstring, struct sockaddr_in *sockaddr, char *uri, int size);
void start_listening(int port);
void forward_request(char *hostname, char *pathname, int port, char *request, char *response, int *size);

/** 
 * main - Main routine for the proxy program 
 */
int main(int argc, char **argv) {
    int port;
    
    /* Check arguments */
    if (argc != 2) {
       fprintf(stderr, "Usage: %s <port number>\n", argv[0]);
       exit(0);
    }

    port = atoi(argv[1]);
    printf("got port %d for listen\n", port);

    start_listening(port);

    exit(0);
}

void start_listening(int port) {
    int sockfd, newsockfd, f_port, n, f_n;
    struct sockaddr_in serv_addr, cli_addr;
    socklen_t clilen;
    char buffer[MAXLINE], f_hostname[MAXLINE], f_pathname[MAXLINE], uri[MAXLINE];
    char *end;

    /* First call to socket() function */
    sockfd = socket(AF_INET, SOCK_STREAM, 0);

    if (sockfd < 0) {
        perror("ERROR opening socket");
        exit(1);
    }

    /* Initialize socket structure */
    bzero((char *) &serv_addr, sizeof(serv_addr));
    
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_addr.s_addr = INADDR_ANY;
    serv_addr.sin_port = htons(port);

    /* Now bind the host address using bind() call.*/
    if (bind(sockfd, (struct sockaddr *) &serv_addr, sizeof(serv_addr)) < 0) {
        perror("ERROR on binding");
        exit(1);
    }

    /* Now start listening for the clients, here process will
    * go in sleep mode and will wait for the incoming connection
    */

    listen(sockfd,5);
    clilen = sizeof(cli_addr);

    /* Accept actual connection from the client */
    newsockfd = accept(sockfd, (struct sockaddr *)&cli_addr, &clilen);

    if (newsockfd < 0) {
        perror("ERROR on accept");
        exit(1);
    }
    while (1) {
        /* If connection is established then start communicating */
        bzero(buffer, MAXLINE);
        n = read(newsockfd, buffer, MAXLINE-1);

        if (n < 0) {
            perror("ERROR reading from socket");
            exit(1);
        }
        if (!n) {
            continue;
        }

        printf("Proxy got %d: %s\n",n, buffer);

        printf("Need to parse URI and forward request now...\n");
        bzero(f_hostname, MAXLINE);
        bzero(f_pathname, MAXLINE);

        end = strpbrk(buffer+4, " ");
        strncpy(uri, buffer+4, end-buffer-4);

        printf("URI is %s\n", uri);

        if (parse_uri(uri, f_hostname, f_pathname, &f_port) > -1) {

            printf("%s %s %d\n", f_hostname, f_pathname, f_port);

            /**
             * Forward request to given URI
             */
            
            forward_request(f_hostname, f_pathname, f_port, buffer, buffer, &f_n);

            printf("Got response\n%s\n", buffer);

            /**
             * Pass result back to client
             */

            n = write(newsockfd,buffer,f_n);

            if (n < 0) {
                perror("ERROR writing to socket");
                exit(1);
            }
            printf("Wrote back %d bytes\n", n);
        } else {
            printf("parse URI failed\n");
        }
    }
}

void forward_request(char *hostname, char *pathname, int port, char *request, char *response, int *size) {
    int sockfd, n;
    struct sockaddr_in serv_addr;
    struct hostent *server;
    char *content_size;
    // char request[MAXLINE];
    
    /* Create a socket point */
    sockfd = socket(AF_INET, SOCK_STREAM, 0);
    
    if (sockfd < 0) {
       perror("ERROR opening socket");
       exit(1);
    }
     
    printf("%s\n", hostname);

    server = gethostbyname(hostname);
    
    if (server == NULL) {
       fprintf(stderr,"ERROR, no such host\n");
       exit(0);
    }
    
    bzero((char *) &serv_addr, sizeof(serv_addr));
    serv_addr.sin_family = AF_INET;
    bcopy((char *)server->h_addr, (char *)&serv_addr.sin_addr.s_addr, server->h_length);
    serv_addr.sin_port = htons(port);
    
    /* Now connect to the server */
    if (connect(sockfd, (struct sockaddr*)&serv_addr, sizeof(serv_addr)) < 0) {
       perror("ERROR connecting");
       exit(1);
    }

    
    /* Send message to the server */
    bzero(request, MAXLINE);
    sprintf(request, "GET /%s HTTP/1.1\r\nHost: %s\r\nConnection: keep-alive\r\n\r\n", pathname, hostname);

    printf("About to send request to server:\n%s\n", request);
    n = write(sockfd, request, strlen(request));
    
    if (n < 0) {
       perror("ERROR writing to socket");
       exit(1);
    }

    printf("Sent request to server\n");
    
    /* Now read server response */
    bzero(response,MAXLINE);

    printf("About to read response\n");
    printf("%lu\n", strlen(response));
    long unsigned int count = 0;
    while ((n = read(sockfd, response + count, MAXLINE-1))) {
        ;
        printf("n is %d\n", n);
        count += n;
    }
    
    *size = count;

    printf("%lu\n", count);

    
    printf("Read response\n");

    if (n < 0) {
       perror("ERROR reading from socket");
       exit(1);
    }

    close(sockfd);
}



/**
 * parse_uri - URI parser
 * 
 * Given a URI from an HTTP proxy GET request (i.e., a URL), extract
 * the host name, path name, and port.  The memory for hostname and
 * pathname must already be allocated and should be at least MAXLINE
 * bytes. Return -1 if there are any problems.
 */
int parse_uri(char *uri, char *hostname, char *pathname, int *port) {
    char *hostbegin;
    char *hostend;
    char *pathbegin;
    int len;

    if (strncasecmp(uri, "http://", 7) != 0) {
        hostname[0] = '\0';
        return -1;
    }

    /* Extract the host name */
    hostbegin = uri + 7;
    hostend = strpbrk(hostbegin, " :/\r\n\0");
    len = hostend - hostbegin;
    strncpy(hostname, hostbegin, len);
    hostname[len] = '\0';

    /* Extract the port number */
    *port = 80; /* default */
    if (*hostend == ':')   
        *port = atoi(hostend + 1);

    /* Extract the path */
    pathbegin = strchr(hostbegin, '/');
    if (pathbegin == NULL) {
        pathname[0] = '\0';
    }
    else {
        pathbegin++;	
        strcpy(pathname, pathbegin);
    }

    return 0;
}

/**
 * format_log_entry - Create a formatted log entry in logstring. 
 * 
 * The inputs are the socket address of the requesting client
 * (sockaddr), the URI from the request (uri), and the size in bytes
 * of the response from the server (size).
 */
void format_log_entry(char *logstring, struct sockaddr_in *sockaddr, char *uri, int size) {
    time_t now;
    char time_str[MAXLINE];
    unsigned long host;
    unsigned char a, b, c, d;

    /* Get a formatted time string */
    now = time(NULL);
    strftime(time_str, MAXLINE, "%a %d %b %Y %H:%M:%S %Z", localtime(&now));

    /**
     * Convert the IP address in network byte order to dotted decimal
     * form. Note that we could have used inet_ntoa, but chose not to
     * because inet_ntoa is a Class 3 thread unsafe function that
     * returns a pointer to a static variable (Ch 13, CS:APP).
     */
    host = ntohl(sockaddr->sin_addr.s_addr);
    a = host >> 24;
    b = (host >> 16) & 0xff;
    c = (host >> 8) & 0xff;
    d = host & 0xff;


    /* Return the formatted log entry string */
    sprintf(logstring, "%s: %d.%d.%d.%d %s", time_str, a, b, c, d, uri);
}

